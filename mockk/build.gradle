buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id "jacoco"
}
apply plugin: "java"
apply plugin: "kotlin-platform-jvm"

ext.junitJupiterVersion = '5.0.3'
ext.junitVintageVersion = '4.12.0'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    expectedBy project(':mockk-common')
    compile project(':mockk-dsl-jvm')
    compile project(":mockk-agent")

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19'

    compileOnly 'org.slf4j:slf4j-api:1.7.25'

    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19'

    testCompile 'org.slf4j:slf4j-api:1.7.25'
    testCompile 'ch.qos.logback:logback-classic:1.2.3'

    testCompile('io.kotlintest:kotlintest:2.0.7') {
        exclude group: "junit", module: "junit"
    }
    testCompile("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version") {
        exclude group: "junit", module: "junit"
    }

    compileOnly "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testCompile "org.junit.vintage:junit-vintage-engine:$junitVintageVersion"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from(project(':mockk-common').sourceSets.main.allSource) {
        exclude "io/mockk/impl/InternalPlatform.kt"
    }
}

artifacts {
    archives sourcesJar
}

test {
    testLogging.showStandardStreams = true
    jvmArgs '-DprojectConfigScan=false'
    filter {
//        includeTestsMatching "io.mockk.impl.*.*"
//        includeTestsMatching "io.mockk.it.ChainedCallsMatchingTest"
    }
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'io/mockk/APIKt.class',
                    'io/mockk/CapturingSlot.class',
                    'io/mockk/LambdaArgs.class',
                    'io/mockk/MockK**Scope**.class'
            ])
        })
    }
}

check.dependsOn jacocoTestReport

kotlin {
    experimental {
        coroutines "enable"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: rootProject.properties['ossrhUsername'] ?: '', password: rootProject.properties['ossrhPassword'] ?: '')
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: rootProject.properties['ossrhUsername'] ?: '', password: rootProject.properties['ossrhPassword'] ?: '')
            }

            pom.project {
                name 'MockK'
                packaging 'jar'
                description 'mocking library for Kotlin'
                url 'http://mockk.io'

                scm {
                    connection 'scm:git:git@github.com:oleksiyp/mockk.git'
                    developerConnection 'scm:git:git@github.com:oleksiyp/mockk.git'
                    url 'http://www.github.com/oleksiyp/mockk/'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id 'oleksiyp'
                        name 'Oleksii Pylypenko'
                        email 'oleksiy.pylypenko@gmail.com'
                    }
                }
            }
        }
    }
}

